<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2391" status="Review">
<title><tt>basic_string</tt> is missing non-<tt>const</tt> <tt>data()</tt></title>
<section><sref ref="[basic.string]"/></section>
<submitter>Michael Bradshaw</submitter>
<date>27 May 2014</date>
<priority>3</priority>

<discussion>
<p>
Regarding <sref ref="[basic.string]"/>, <tt>std::basic_string&lt;charT&gt;::data()</tt> returns a <tt>const charT*</tt> 
<sref ref="[string.accessors]"/>. While this method is convenient, it doesn't quite match <tt>std::array&lt;T&gt;::data()</tt> 
<sref ref="[array.data]"/> or <tt>std::vector&lt;T&gt;::data()</tt> <sref ref="[vector.data]"/>, both of which provide two 
versions (that return <tt>T*</tt> or <tt>const T*</tt>). An additional <tt>data()</tt> method can be added to 
<tt>std::basic_string</tt> that returns a <tt>charT*</tt> so it can be used in similar situations that <tt>std::array</tt> and 
<tt>std::vector</tt> can be used. Without a non-<tt>const</tt> <tt>data()</tt> method, <tt>std::basic_string</tt> has to be treated 
specially in code that is otherwise oblivious to the container type being used.
<p/>
Adding a <tt>charT*</tt> return type to <tt>data()</tt> would be equivalent to doing <tt>&amp;str[0]</tt> or <tt>&amp;str.front()</tt>.
<p/>
Small discussion on the issue can be found <a href="http://stackoverflow.com/questions/7518732/why-are-stdvectordata-and-stdstringdata-different">here</a>
and in the <a href="https://groups.google.com/a/isocpp.org/forum/#!topic/std-discussion/ll9HuEML6zo/discussion">std-discussion thread</a>  
(which didn't get too much attention).
<p/>
This requires a small change to <tt>std::basic_string</tt>'s definition in <sref ref="[basic.string]"/> to add the method to 
<tt>std::basic_string</tt>, and another small change in <sref ref="[string.accessors]"/> to define the new method.
</p>

<note>Teleconference, Jan 2015</note>
<p>
Broad but not unanimous support.  The objection was a concern that this is changing the
interface of a class through the issues process.
</p>

<p>
AJM to ask LEWG chair if they want to take this issue before we revisit, otherwise it
may move to Ready on next review.
</p>

</discussion>

<resolution>
<p>This wording is relative to N3936.</p>

<ol>
<li><p>Change class template <tt>basic_string</tt> synopsis, <sref ref="[basic.string]"/>, as indicated:</p>
<blockquote>
<pre>
namespace std {
  template&lt;class charT, class traits = char_traits&lt;charT&gt;,
  class Allocator = allocator&lt;charT&gt; &gt;
  class basic_string {
  public:
    [&hellip;]
    <i>// 21.4.7, string operations:</i>
    const charT* c_str() const noexcept;
    const charT* data() const noexcept;
    <ins>charT* data() noexcept;</ins>
    allocator_type get_allocator() const noexcept;
    [&hellip;]
  };
}
</pre>
</blockquote>

</li>

<li><p>Add the following sequence of paragraphs following <sref ref="[string.accessors]"/> p3, as indicated:</p>
<blockquote>
<pre>
<ins>charT* data() noexcept;</ins>
</pre>
<blockquote>
<p>
<ins>-?- <i>Returns</i>: A pointer <tt>p</tt> such that <tt>p + i == &amp;operator[](i)</tt> for each <tt>i</tt> in <tt>[0,size()]</tt>.</ins>
<p/>
<ins>-?- <i>Complexity</i>: Constant time.</ins>
<p/>
<ins>-?- <i>Requires</i>: The program shall not alter the value stored at <tt>p + size()</tt>.</ins>
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
