<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2454" status="Tentatively Ready">
<title>Add <tt>raw_storage_iterator::base()</tt> member</title>
<section><sref ref="[storage.iterator]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>11 Nov 2014</date>
<priority>0</priority>

<discussion>
<p>
Eric Niebler pointed out that <tt>raw_storage_iterator</tt> should give access
to the <tt>OutputIterator</tt> it wraps.
<p/>
This helps alleviate the exception-safety issue pointed out in the
discussion of LWG <iref ref="2127"/>, as an exception can be caught and then
destructors can be run for the constructed elements in the range
<tt>[begin, raw.base())</tt>
</p>
</discussion>

<resolution>
<p>This wording is relative to <a href="http://www.open-std.org/jtc1/sc22/wg21/prot/14882fdis/n4140.pdf">N4140</a>.</p>

<ol>
<li><p>Add a new function to the synopsis in <sref ref="[storage.iterator]"/> p1:</p>

<blockquote><pre>
namespace std {
  template &lt;class OutputIterator, class T&gt;
  class raw_storage_iterator
    : public iterator&lt;output_iterator_tag,void,void,void,void&gt; {
  public:
    explicit raw_storage_iterator(OutputIterator x);

    raw_storage_iterator&lt;OutputIterator,T&gt;&amp; operator*();
    raw_storage_iterator&lt;OutputIterator,T&gt;&amp; operator=(const T&amp; element);
    raw_storage_iterator&lt;OutputIterator,T&gt;&amp; operator++();
    raw_storage_iterator&lt;OutputIterator,T&gt; operator++(int);
    <ins>OutputIterator base() const;</ins>
};
}
</pre></blockquote>
</li>

<li><p>Insert the new function and a new paragraph series after p7:</p>

<blockquote><pre>
<ins>OutputIterator base() const;</ins>
</pre><blockquote>
<p>
<ins>-?- <i>Returns</i>: An iterator of type <tt>OutputIterator</tt> that points to the
same value as <tt>*this</tt> points to.</ins>
</p>
</blockquote></blockquote>
</li>

</ol>
</resolution>

</issue>
