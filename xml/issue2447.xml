<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2447" status="Open">
<title>Allocators and <tt>volatile</tt>-qualified value types</title>
<section><sref ref="[allocator.requirements]"/></section>
<submitter>Daniel Kr&uuml;gler</submitter>
<date>16 Oct 2014</date>
<priority>4</priority>

<discussion>
<p>
According to Table 27 &mdash; "Descriptive variable definitions" which is used to define the symbols used in the
allocator requirements table within <sref ref="[allocator.requirements]"/> we have the following constraints for
the types <tt>T, U, C</tt>:
</p>
<blockquote><p>
any non-const object type (3.9)
</p></blockquote>
<p>
This wording can be read to allow instead a <tt>volatile</tt>-qualified value type such as <tt>volatile int</tt>.
<p/>
The nearest-by way of fixing this would be to add "non-<tt>volatile</tt>" as additional constraint to this table
row.
<p/>
Another choice would be to think of requiring that allocators must be capable to handle any <tt><i>cv</i></tt>-qualified
value types. This would make all currently existing allocators non-conforming that can't handle <tt><i>cv</i></tt>-qualified 
value types, so I'm not suggesting to follow that route.
<p/>
A less radical step would be to allow <tt><ii>cv</ii></tt>-qualified types just for <tt>C</tt> (which is used to specify the
functions <tt>construct</tt> and <tt>destroy</tt> and where does not even exist any requirement that <tt>C</tt> actually 
is related to the value type of the allocator at all). This seemingly extension would be harmless because as of p8 of the
same sub-clause "An allocator may constrain the types on which it can be instantiated and the arguments for which its
<tt>construct</tt> member may be called."
<p/>
This differs from the requirements imposed on the types <tt>T</tt> and <tt>U</tt> which both refer to value types of allocators.
<p/>
The proposed wording attempts to separate the two classes of requirements.
</p>
</discussion>

<resolution>
<p>
This wording is relative to N4140.
</p>

<ol>
<li><p>Change <sref ref="[allocator.requirements]"/>, Table 27 &mdash; "Descriptive variable definitions", as indicated:</p>
<blockquote>
<table border="1">
<caption>Table 27 &mdash; Descriptive variable definitions</caption>
<tr>
<th>Variable</th>
<th>Definition</th>
</tr>

<tr>
<td>
<tt>T, U<del>, C</del></tt>
</td>
<td>
any non-<del>const</del><ins><tt>const</tt> and non-<tt>volatile</tt></ins> object type (3.9)
</td>
</tr>

<tr>
<td>
<ins><tt>C</tt></ins>
</td>
<td>
<ins>any object type</ins>
</td>
</tr>

<tr>
<td colspan="2" align="center">
<tt>&hellip;</tt>
</td>
</tr>

</table>
</blockquote>
</li>

<li><p>Change <sref ref="[allocator.requirements]"/> p8 as indicated: (This wording change is intended to
fix an obvious asymmetry between <tt>construct</tt> and <tt>destroy</tt> which I believe is not intended)</p>

<blockquote><p>
-8- An allocator may constrain the types on which it can be instantiated and the arguments for which its
<tt>construct</tt> <ins>or <tt>destroy</tt></ins> member<ins>s</ins> may be called. If a type cannot be 
used with a particular allocator, the allocator class or the call to <tt>construct</tt> <ins>or <tt>destroy</tt></ins> 
may fail to instantiate.
</p></blockquote>
</li>
</ol>
</resolution>

</issue>
