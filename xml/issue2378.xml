<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2378" status="Review">
<title>Behaviour of standard exception types</title>
<section><sref ref="[bad.alloc]"/>, <sref ref="[new.badlength]"/>, <sref ref="[bad.cast]"/>, <sref ref="[bad.typeid]"/>,
<sref ref="[bad.exception]"/></section>
<submitter>Andy Sawyer</submitter>
<date>31 Mar 2014</date>
<priority>0</priority>

<discussion>
<p>
I think we have an issue with the specification of some of the standard exception types. 
In particular, several of them have default constructors with remarks to the effect that 
"The result of calling <tt>what()</tt> on the newly constructed object is implementation-defined". 
(In some cases this is contradictory to a further specification of <tt>what()</tt>, which 
is specified to return an implementation-defined NTBS.)
</p>

<p>
<strong>Previous resolution from Andy [SUPERSEDED]:</strong>
</p>
<blockquote class="note">
<p>This wording is relative to N3936.</p>

<ol>
<li><p>Edit <sref ref="[bad.alloc]"/> p3 as indicated:</p>

<blockquote>
<pre>
bad_alloc() noexcept;
</pre><blockquote>
<p>
[&hellip;]
<p/>
-3- <i>Remarks</i>: <del>The result of calling <tt>what()</tt> on the newly constructed object is 
  implementation-defined</del><ins><tt>what()</tt> returns an implementation-defined NTBS</ins>.
</p>
</blockquote>
</blockquote>
</li>

<li><p>Edit <sref ref="[new.badlength]"/> p3 as indicated: [<i>Drafting note</i>: Added the Postcondition, since we don't 
say anything else about <tt>bad_array_new_length::what()</tt> &mdash; <i>end of note</i>]</p>

<blockquote>
<pre>
bad_array_new_length() noexcept;
</pre><blockquote>
<p>
[&hellip;]
<p/>
-3- <i><del>Remarks</del><ins>Postcondition</ins></i>: <del>The result of calling <tt>what()</tt> on the newly constructed object is 
  implementation-defined</del><ins><tt>what()</tt> returns an implementation-defined NTBS</ins>.
</p>
</blockquote>
</blockquote>
</li>

<li><p>Edit <sref ref="[bad.cast]"/> p3 as indicated:</p>

<blockquote>
<pre>
bad_cast() noexcept;
</pre><blockquote>
<p>
[&hellip;]
<p/>
<del>-3- <i>Remarks</i>: The result of calling <tt>what()</tt> on the newly constructed object is implementation-defined.</del>.
</p>
</blockquote>
</blockquote>
</li>

<li><p>Edit <sref ref="[bad.typeid]"/> p3 as indicated:</p>

<blockquote>
<pre>
bad_typeid() noexcept;
</pre><blockquote>
<p>
[&hellip;]
<p/>
<del>-3- <i>Remarks</i>: The result of calling <tt>what()</tt> on the newly constructed object is implementation-defined.</del>.
</p>
</blockquote>
</blockquote>
</li>

<li><p>Edit <sref ref="[bad.exception]"/> p3 as indicated:</p>

<blockquote>
<pre>
bad_exception() noexcept;
</pre><blockquote>
<p>
[&hellip;]
<p/>
<del>-3- <i>Remarks</i>: The result of calling <tt>what()</tt> on the newly constructed object is implementation-defined.</del>.
</p>
</blockquote>
</blockquote>
</li>
</ol>
</blockquote>

<note>2014-06-17, Rapperswil</note>
<p>
Jonathan provides alternative wording.
</p>

</discussion>

<resolution>
<p>This wording is relative to N3936.</p>

<ol>
<li><p>Edit <sref ref="[bad.alloc]"/> p3 as indicated:</p>

<blockquote>
<pre>
bad_alloc() noexcept;
</pre><blockquote>
<p>
[&hellip;]
<p/>
<del>-3- <i>Remarks</i>: The result of calling <tt>what()</tt> on the newly constructed object is 
  implementation-defined.</del>
</p>
</blockquote>
</blockquote>
</li>

<li><p>Edit <sref ref="[bad.alloc]"/> p5 as indicated:</p>

<blockquote>
<pre>
virtual const char* what() const noexcept;
</pre>
<blockquote>
<p>
-5- <i>Returns</i>: An implementation-defined NTBS.
<p/>
<ins>-?- <i>Remarks</i>: The message may be a null-terminated multibyte string (17.5.2.1.4.2), suitable for conversion
and display as a <tt>wstring</tt> (21.3, 22.4.1.4).</ins>
</p>
</blockquote>
</blockquote>

</li>

<li><p>Edit class <tt>bad_array_new_length</tt> synopsis <sref ref="[new.badlength]"/> as indicated:</p>

<blockquote>
<pre>
namespace std {
  class bad_array_new_length : public bad_alloc {
  public:
    bad_array_new_length() noexcept;
    <ins>virtual const char* what() const noexcept;</ins>
  };
}
</pre>
</blockquote>
</li>

<li><p>Edit <sref ref="[new.badlength]"/> as indicated:</p>

<blockquote>
<pre>
bad_array_new_length() noexcept;
</pre><blockquote>
<p>
[&hellip;]
<p/>
<del>-3- <i>Remarks</i>: The result of calling <tt>what()</tt> on the newly constructed object is 
  implementation-defined.</del>
</p>
</blockquote>
<pre>
<ins>virtual const char* what() const noexcept;</ins>
</pre>
<blockquote>
<p>
<ins>-?- <i>Returns</i>: An implementation-defined NTBS.</ins>
<p/>
<ins>-?- <i>Remarks</i>: The message may be a null-terminated multibyte string (17.5.2.1.4.2), suitable for conversion
and display as a <tt>wstring</tt> (21.3, 22.4.1.4).</ins>
</p>
</blockquote>
</blockquote>
</li>

<li><p>Edit <sref ref="[bad.cast]"/> p3 as indicated:</p>

<blockquote>
<pre>
bad_cast() noexcept;
</pre><blockquote>
<p>
[&hellip;]
<p/>
<del>-3- <i>Remarks</i>: The result of calling <tt>what()</tt> on the newly constructed object is implementation-defined.</del>.
</p>
</blockquote>
</blockquote>
</li>

<li><p>Edit <sref ref="[bad.typeid]"/> p3 as indicated:</p>

<blockquote>
<pre>
bad_typeid() noexcept;
</pre><blockquote>
<p>
[&hellip;]
<p/>
<del>-3- <i>Remarks</i>: The result of calling <tt>what()</tt> on the newly constructed object is implementation-defined.</del>.
</p>
</blockquote>
</blockquote>
</li>

<li><p>Edit <sref ref="[bad.exception]"/> p3 as indicated:</p>

<blockquote>
<pre>
bad_exception() noexcept;
</pre><blockquote>
<p>
[&hellip;]
<p/>
<del>-3- <i>Remarks</i>: The result of calling <tt>what()</tt> on the newly constructed object is implementation-defined.</del>.
</p>
</blockquote>
</blockquote>
</li>
</ol>

</resolution>

</issue>
