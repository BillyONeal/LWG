<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2388" status="Open">
<title>Handling self-assignment in the proposed library function <tt>std::exchange</tt></title>
<section><sref ref="[utility.exchange]"/></section>
<submitter>Nick Calus</submitter>
<date>9 May 2014</date>
<priority>2</priority>

<discussion>
<p>
In paper <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3668.html">N3668</a>, the addition of a template function 
<tt>std::exchange</tt> had been proposed. In the rationale provided by the paper, we find the following:
</p>
<blockquote>
<p>
I chose the name for symmetry with <tt>atomic_exchange</tt>, since they behave the same except for this function not being atomic.
</p>
</blockquote>
<p>
and:
</p>
<blockquote>
<p>
Atomic objects provide an <tt>atomic_exchange</tt> function ([atomics.types.operations.req]p18) that <em>assigns a new value to the object 
and returns the old value</em>. This operation is also useful on non-atomic objects, and this paper proposes adding it to the library.
<p/>
But the specified semantics of <tt>std::exchange</tt> is defined as follows:
</p>
</blockquote>
<blockquote><pre>
template &lt;class T, class U=T&gt; T exchange(T&amp; obj, U&amp;&amp; new_val);
</pre>
<blockquote>
<p>
<i>Effects</i>: Equivalent to:
</p>
<blockquote><pre>
T old_val = std::move(obj);
obj = std::forward&lt;U&gt;(new_val);
return old_val;
</pre>
</blockquote>
</blockquote>
</blockquote>
<p>
When looking at the post-condition of the <tt>std::exchange</tt> function, one would expect the return value to be the old value 
of <tt>obj</tt> and also that <tt>obj</tt> now contains the value of <tt>new_value</tt>.
This post-condition is violated when <tt>obj</tt> is a reference to the same object as <tt>new_value</tt> and type <tt>T</tt> 
has move semantics.
<p/>
Given it's specification, it is clear that <tt>std::exchange</tt> is meant to be used with types that have move semantics.
Therefore, the post-condition is violated for self-assignments.
<p/>
Suppose the following situation:
<p/>
You have a vector of objects. The objects implement move semantics and are emptied when moved from.
You provide a function that allows you to replace an object at a specific index by a new object (provided by reference as 
an argument to your function). When replacing an object, your function calls a member-function <tt>do_something_fancy</tt> 
on the old object.
</p>
<blockquote><pre>
void your_function(int i, X&amp; new_val) {
  std::exchange(vec[i], new_val).do_something_fancy();
}
</pre></blockquote>
<p>
Your function gets called with a given index and the corresponding element of said vector. (by coincidence or by purpose, it 
doesn't really matter)
</p>
<blockquote><pre>
your_function(5, vec[5]);
</pre></blockquote>
<p>
This will cause the object at <tt>vec[5]</tt> to be in an empty state.
If this object would not implement move semantics, assignment performance is potentially worse, but at least it 
is not in an empty (to my business logic, invalid) state.
<p/>
So to me, the current reference implementation of <tt>std::exchange</tt> does not have the behavior it is expected to have.
</p>
</discussion>

<resolution>
<p>This wording is relative to N3936.</p>

<ol>
<li><p>Change <sref ref="[utility.exchange]"/> as indicated:</p>
<blockquote><pre>
template &lt;class T, class U=T&gt; T exchange(T&amp; obj, U&amp;&amp; new_val);
</pre>
<blockquote>
<p>
-1- <i>Effects</i>: Equivalent to:
</p>
<blockquote><pre>
<ins>T tmp = std::forward&lt;U&gt;(new_val);</ins>
T old_val = std::move(obj);
obj = <del>std::forward&lt;U&gt;(new_val)</del><ins>std::move(tmp)</ins>;
return old_val;
</pre>
</blockquote>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
